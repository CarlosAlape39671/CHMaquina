/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chmaquina.sistemaOperativoGUI;
import chmaquina.sistemaOperativo.SistemaOperativo;
import chmaquina.programa.Programa;
import chmaquina.interprete.Interprete;
import java.awt.Color;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CAOS
 */
public class SistemaOperativoIterfaz extends javax.swing.JFrame {
   
    /**
     * Creates new form sistemaOperativo
     */
    public SistemaOperativoIterfaz() {
        initComponents();
        lblProgramName.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtAccumulator = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        spnMemory = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spnKernel = new javax.swing.JSpinner();
        btnTurnOn = new javax.swing.JButton();
        btnTurnOff = new javax.swing.JButton();
        cmbxPlanification = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaScreen = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaPrinter = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMemoryTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblVariablesTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblTagsTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblProcessTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblProgramsTable = new javax.swing.JTable();
        lblProgramName = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuExecute = new javax.swing.JMenu();
        jMenuPrint = new javax.swing.JMenu();
        jMenuStepByStep = new javax.swing.JMenu();
        jMenuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Accumulator");

        txtAccumulator.setFocusable(false);

        jLabel2.setText("PC");

        txtPc.setFocusable(false);

        jLabel3.setText("Memory");

        spnMemory.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel4.setText("Kernel");

        spnKernel.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnTurnOn.setText("Turn On");
        btnTurnOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnOnActionPerformed(evt);
            }
        });

        btnTurnOff.setText("Turn Off");
        btnTurnOff.setEnabled(false);
        btnTurnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnOffActionPerformed(evt);
            }
        });

        cmbxPlanification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF/Nonexpropriative", "X priority as/Nonexpropriative", "RR" }));
        cmbxPlanification.setEnabled(false);

        txtaScreen.setColumns(20);
        txtaScreen.setRows(5);
        txtaScreen.setFocusable(false);
        jScrollPane1.setViewportView(txtaScreen);

        txtaPrinter.setColumns(20);
        txtaPrinter.setRows(5);
        txtaPrinter.setFocusable(false);
        jScrollPane2.setViewportView(txtaPrinter);

        tblMemoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Direc", "Content"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblMemoryTable);
        if (tblMemoryTable.getColumnModel().getColumnCount() > 0) {
            tblMemoryTable.getColumnModel().getColumn(0).setResizable(false);
            tblMemoryTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblMemoryTable.getColumnModel().getColumn(1).setResizable(false);
            tblMemoryTable.getColumnModel().getColumn(1).setPreferredWidth(350);
        }

        tblVariablesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Pos", "Variable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblVariablesTable);
        if (tblVariablesTable.getColumnModel().getColumnCount() > 0) {
            tblVariablesTable.getColumnModel().getColumn(0).setResizable(false);
            tblVariablesTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblVariablesTable.getColumnModel().getColumn(1).setResizable(false);
            tblVariablesTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        tblTagsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Pos", "Tag"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblTagsTable);
        if (tblTagsTable.getColumnModel().getColumnCount() > 0) {
            tblTagsTable.getColumnModel().getColumn(0).setResizable(false);
            tblTagsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblTagsTable.getColumnModel().getColumn(1).setResizable(false);
            tblTagsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        tblProcessTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Pos", "Process"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblProcessTable);
        if (tblProcessTable.getColumnModel().getColumnCount() > 0) {
            tblProcessTable.getColumnModel().getColumn(0).setResizable(false);
            tblProcessTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblProcessTable.getColumnModel().getColumn(1).setResizable(false);
            tblProcessTable.getColumnModel().getColumn(1).setPreferredWidth(350);
        }

        tblProgramsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Program", "Ins", "RB", "RLC", "RLP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblProgramsTable);
        if (tblProgramsTable.getColumnModel().getColumnCount() > 0) {
            tblProgramsTable.getColumnModel().getColumn(0).setResizable(false);
            tblProgramsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblProgramsTable.getColumnModel().getColumn(1).setResizable(false);
            tblProgramsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblProgramsTable.getColumnModel().getColumn(2).setResizable(false);
            tblProgramsTable.getColumnModel().getColumn(3).setResizable(false);
            tblProgramsTable.getColumnModel().getColumn(4).setResizable(false);
            tblProgramsTable.getColumnModel().getColumn(5).setResizable(false);
        }

        lblProgramName.setBackground(java.awt.Color.gray);
        lblProgramName.setForeground(java.awt.Color.white);
        lblProgramName.setAlignmentY(0.0F);
        lblProgramName.setOpaque(true);

        jMenuFile.setText("FILE");
        jMenuFile.setEnabled(false);
        jMenuFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuFileMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuFile);

        jMenuExecute.setText("EXECUTE");
        jMenuExecute.setEnabled(false);
        jMenuExecute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuExecuteMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuExecute);

        jMenuPrint.setText("PRINT");
        jMenuPrint.setEnabled(false);
        jMenuPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuPrintMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuPrint);

        jMenuStepByStep.setText("STEP BY STEP");
        jMenuStepByStep.setEnabled(false);
        jMenuStepByStep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuStepByStepMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuStepByStep);

        jMenuExit.setText("EXIT");
        jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuExitMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblProgramName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbxPlanification, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(spnKernel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnTurnOff, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(spnMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnTurnOn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(txtAccumulator)
                                    .addComponent(txtPc))))
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblProgramName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAccumulator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPc)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(spnMemory, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTurnOn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(spnKernel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTurnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(19, 19, 19)
                                .addComponent(cmbxPlanification, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTurnOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnOnActionPerformed
        try {
            int kernel = (int) spnKernel.getValue();
            int memory = (int) spnMemory.getValue();
            if (kernel == 0 || memory == 0) {
                 throw new Exception ("the kernel or memory were not entered.");
            }
            jMenuFile.setEnabled(true);
            btnTurnOff.setEnabled(true);
            spnMemory.setEnabled(false);
            spnKernel.setEnabled(false);
            SistemaOperativo.SistemaOperativoKernelSizeAndMemorySize(kernel, memory);   
            SistemaOperativo.establishMemorySize();
            SistemaOperativo.setProgramIterator(0);
            SistemaOperativo.setCountLineIterator(0);
            SistemaOperativo.setFirstIterationStepByStep(true);
        } catch (Exception e) {
            this.showMessage( String.valueOf(e), 1);
        }
    }//GEN-LAST:event_btnTurnOnActionPerformed

    private void jMenuExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jMenuExitMouseClicked

    private void jMenuFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuFileMouseClicked
        FileDialog dialogArchive;
        dialogArchive = new FileDialog(this, "List of files from frame",FileDialog.LOAD);
        dialogArchive.setVisible(true);
        if(dialogArchive.getFile()!=null){ /* Validar que se haya Seleccionado un Archivo*/
            String directory = dialogArchive.getDirectory();
            String fileName =dialogArchive.getFile(); 
            String fullPath = directory + fileName;
            ArrayList<String> chProgram = readFile( new File(fullPath) );
            if (chProgram.size() != 0) {
                Programa program = new Programa(fileName, chProgram);
                program.removeEmptyLines();
                program.checkSyntax();
                if (program.getSyntax()) {
                    System.out.println("Correcto");
                    boolean savedProgram = SistemaOperativo.saveProgram(program);
                    if (savedProgram) {
                        SistemaOperativo.establishData();
                        updateDataFromTables();
                        cmbxPlanification.setEnabled(true);
                        jMenuExecute.setEnabled(true);
                        jMenuStepByStep.setEnabled(true);
                    } else {
                        this.showMessage( String.valueOf("the file exceeds the memory size"), 3);
                    }
                }
            } else {
                this.showMessage( String.valueOf("the file is empty"), 2);
            }
        }
        else {
            this.showMessage( String.valueOf("You did not select a file"), 3);
        } 
    }//GEN-LAST:event_jMenuFileMouseClicked

    private void jMenuExecuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExecuteMouseClicked
        ArrayList<Programa> programs = SistemaOperativo.getPrograms();
        if (SistemaOperativo.isFirstIterationStepByStep()) {
            establishNecessaryForExecution();
        }
        int countOfPrograms = SistemaOperativo.getProgramIterator();
        boolean thereIsAProgramToRun = false;
        do {
            if (countOfPrograms == 0) {
                thereIsAProgramToRun = false;
            }
            if (!SistemaOperativo.hasItEnd(countOfPrograms)) {
                int countLine = SistemaOperativo.getCountLineIterator();
                boolean canItContinue;
                do {
                    canItContinue = true;
                    executeForOneLine(programs, countOfPrograms);
                    countLine += 1;
                    if (SistemaOperativo.getTypeOfPriority().equals("RR") && countLine >= SistemaOperativo.getNumberOfIterationsPerProgram()) {
                        canItContinue = false;
                    } 
                } while ( canItContinue && SistemaOperativo.getExecutedLines()[countOfPrograms] < programs.get(countOfPrograms).getChProgram().size() );
                thereIsAProgramToRun = true;
            }
            if (SistemaOperativo.getTypeOfPriority().equals("RR") && countOfPrograms == programs.size() - 1) {
                countOfPrograms = 0;
            } else {
                countOfPrograms += 1;
            }
        } while ( thereIsAProgramToRun && countOfPrograms < programs.size() );
    }//GEN-LAST:event_jMenuExecuteMouseClicked

    private void jMenuStepByStepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuStepByStepMouseClicked
        ArrayList<Programa> programs = SistemaOperativo.getPrograms();
        if (SistemaOperativo.isFirstIterationStepByStep()) {
            establishNecessaryForExecution();
        }
        int countOfPrograms = SistemaOperativo.getProgramIterator();
        int countOfLines = SistemaOperativo.getCountLineIterator();        
        int countIterationsPrograms = 0;
        boolean thereAreProgramsForExecute = false;
        do {            
            if ( !(countOfPrograms < programs.size()) ) {
                countOfPrograms = 0;
            }
            if (SistemaOperativo.getExecutedLines()[countOfPrograms] == programs.get(countOfPrograms).getChProgram().size()) {
                countOfPrograms += 1;
                SistemaOperativo.setProgramIterator(countOfPrograms);
                countOfLines = 0;
                SistemaOperativo.setCountLineIterator(countOfLines);
            } else {
                thereAreProgramsForExecute = true;
            }
            countIterationsPrograms += 1;
        } while (!thereAreProgramsForExecute && countIterationsPrograms < programs.size());
        if (thereAreProgramsForExecute) {
            executeForOneLine(programs, countOfPrograms);
            SistemaOperativo.setProgramIterator(countOfPrograms);
            if (SistemaOperativo.getTypeOfPriority().equals("RR") ) {
                countOfLines += 1;
                SistemaOperativo.setCountLineIterator(countOfLines);
                if (countOfLines == SistemaOperativo.getNumberOfIterationsPerProgram()) {
                    SistemaOperativo.setCountLineIterator(0);
                    countOfPrograms += 1;
                    SistemaOperativo.setProgramIterator(countOfPrograms);
                }
            }
        }
    }//GEN-LAST:event_jMenuStepByStepMouseClicked

    private void btnTurnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnOffActionPerformed
        SistemaOperativo.rebootSistemaOperativoVariables();
        Interprete.rebootInterpreteVariables();
        rebootSistemaOperativoInterfaz();
    }//GEN-LAST:event_btnTurnOffActionPerformed

    private void jMenuPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuPrintMouseClicked
        for (String valueToPrint : SistemaOperativo.getValuesToPrint()) {
            txtaPrinter.append( valueToPrint + "\n");
        }
    }//GEN-LAST:event_jMenuPrintMouseClicked
    
    public void establishNecessaryForExecution() {
        lblProgramName.setVisible(true);
        jMenuPrint.setEnabled(true);
        SistemaOperativo.setValuesToPrint(new ArrayList<>());
        SistemaOperativo.setTypeOfPriority(cmbxPlanification.getSelectedItem().toString());
        checkAndPassForTypeOfPriority();
        SistemaOperativo.establishExecutedLinesSize();    
        SistemaOperativo.setFirstIterationStepByStep(false);
    }
    
    public void rebootSistemaOperativoInterfaz() {
        cleanBoard((DefaultTableModel) tblMemoryTable.getModel());
        cleanBoard((DefaultTableModel) tblProcessTable.getModel());
        cleanBoard((DefaultTableModel) tblProgramsTable.getModel());
        cleanBoard((DefaultTableModel) tblTagsTable.getModel());
        cleanBoard((DefaultTableModel) tblVariablesTable.getModel());
        txtAccumulator.setText("");
        txtPc.setText("");
        txtaPrinter.setText("");
        txtaScreen.setText("");
        spnMemory.setValue(0);
        spnKernel.setValue(0);
        cmbxPlanification.setSelectedIndex(0);
        lblProgramName.setVisible(false);
        cmbxPlanification.setEnabled(false);
        jMenuExecute.setEnabled(false);
        jMenuStepByStep.setEnabled(false);
        jMenuFile.setEnabled(false);
        jMenuPrint.setEnabled(false);
        btnTurnOff.setEnabled(false);
        spnMemory.setEnabled(true);
        spnKernel.setEnabled(true);
    }
    
    public void executeForOneLine( ArrayList<Programa> programs, int countOfPrograms) {
        String[] list = SistemaOperativo.executeLine(programs.get(countOfPrograms).getChProgram().get(SistemaOperativo.getExecutedLines()[countOfPrograms]));
        Interprete.setProgram(programs.get(countOfPrograms));
        Interprete.setLine(list);
        Interprete.establishLineString();
        insertDataIntoProgramNameField();
        insertDataIntoLineField();
        Interprete.interpret();
        insertDataIntoAccumulatorField();
        if (Interprete.getScreen()) {
            insertDataIntoScreem();
        }
        if (Interprete.getPrinter()) {
            insertDataIntoPrinter();
            saveDataIntoValuesToPrint();
        }
        if (Interprete.getNewPosition()) {
            SistemaOperativo.getExecutedLines()[countOfPrograms] = Interprete.getPosition() - 1;
        }
        SistemaOperativo.updateMemoryData();
        insertDataIntoMemoryTable();
        SistemaOperativo.getExecutedLines()[countOfPrograms] += 1;
    }
    
    public void updateDataFromTables(){
        insertDataIntoMemoryTable();
        insertDataIntoTagTable();
        insertDataIntoVariableTable();
        insertDataIntoProcessTable();
        insertDataIntoProgramsTable();
    }
    
    public void insertDataIntoMemoryTable(){
        String[] memory = SistemaOperativo.getMemory();
        DefaultTableModel model = (DefaultTableModel) tblMemoryTable.getModel();
        for (int i = 0; i < tblMemoryTable.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
        for (int i = 0; i < memory.length; i++) {
            Object [] fila = new Object[2];
            fila[0]= SistemaOperativo.checkAndChangePosition(i);
            fila[1]=memory[i];
            model.addRow(fila);
        }
        tblMemoryTable.setModel(model);
    }
    
    public void insertDataIntoTagTable(){
        ArrayList<String> tags = SistemaOperativo.getTags();
        ArrayList<Integer> positionTagsInMemory = SistemaOperativo.getPositionTagsInMemory();
        DefaultTableModel model = (DefaultTableModel) tblTagsTable.getModel();
        for (int i = 0; i < tblTagsTable.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
        for (int i = 0; i < tags.size(); i++) {
            Object [] fila = new Object[2]; 
            fila[0]= SistemaOperativo.checkAndChangePosition(positionTagsInMemory.get(i)); 
            fila[1]=tags.get(i); 
            model.addRow(fila);
        }
        tblTagsTable.setModel(model); 
    }
    
    public void insertDataIntoVariableTable(){
        ArrayList<String> variables = SistemaOperativo.getVariables();
        ArrayList<Integer> positionVariablesInMemory = SistemaOperativo.getPositionVariablesInMemory();
        DefaultTableModel model = (DefaultTableModel) tblVariablesTable.getModel();
        for (int i = 0; i < tblVariablesTable.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
        for (int i = 0; i < variables.size(); i++) {
            Object [] fila = new Object[2]; 
            fila[0] = SistemaOperativo.checkAndChangePosition(positionVariablesInMemory.get(i)); 
            fila[1] = variables.get(i); 
            model.addRow(fila);
        }
        tblVariablesTable.setModel(model); 
    }
    
    public void insertDataIntoProcessTable(){
        ArrayList<String> processes = SistemaOperativo.getProcesses();
        ArrayList<Integer> positionProcessesInMemory = SistemaOperativo.getPositionProcessesInMemory();
        DefaultTableModel model = (DefaultTableModel) tblProcessTable.getModel();
        for (int i = 0; i < tblProcessTable.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
        for (int i = 0; i < processes.size(); i++) {
            Object [] fila = new Object[2]; 
            fila[0] = SistemaOperativo.checkAndChangePosition(positionProcessesInMemory.get(i)); 
            fila[1] = processes.get(i); 
            model.addRow(fila);
        }
        tblProcessTable.setModel(model); 
    }
    
    public void insertDataIntoProgramsTable(){
        ArrayList<String> names = SistemaOperativo.getNames();
        ArrayList<String> inss = SistemaOperativo.getInss();
        ArrayList<String> rbs = SistemaOperativo.getRbs();
        ArrayList<String> rlcs = SistemaOperativo.getRlcs();
        ArrayList<String> rlps = SistemaOperativo.getRlps();
        DefaultTableModel model = (DefaultTableModel) tblProgramsTable.getModel();
        for (int i = 0; i < tblProgramsTable.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
        for (int i = 0; i < names.size(); i++) {
            Object [] fila = new Object[6]; 
            fila[0] = SistemaOperativo.checkAndChangePosition(i); 
            fila[1] = names.get(i); 
            fila[2] = inss.get(i); 
            fila[3] = rbs.get(i); 
            fila[4] = rlcs.get(i); 
            fila[5] = rlps.get(i); 
            model.addRow(fila);
        }
        tblProgramsTable.setModel(model); 
    }
    
    public void insertDataIntoScreem(){
        txtaScreen.append(Interprete.getDataToDisplayInScreen() + "\n");
    }
    
    public void insertDataIntoPrinter(){
        txtaPrinter.append(Interprete.getDataToDisplayInPrinter() + "\n");
    }
    
    public void saveDataIntoValuesToPrint(){
        SistemaOperativo.addValueToPrint(Interprete.getDataToDisplayInPrinter());
    }
    
    public void insertDataIntoAccumulatorField(){
        txtAccumulator.setText(Interprete.getProgram().getAccumulator());
    }
    
    public void insertDataIntoProgramNameField(){
        lblProgramName.setText(Interprete.getProgram().getName());
    }
    
    public void insertDataIntoLineField(){
        txtPc.setText(Interprete.getLineString());
    }
    
    public void cleanBoard(DefaultTableModel modelo){
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
    }   
    
    public ArrayList<String> readFile(File fila){
        ArrayList<String> chProgram = new ArrayList<String>();
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(fila);
            br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                chProgram.add(line);
            }
        } catch (IOException e) {
            this.showMessage( String.valueOf(e), 1);
        } finally {
            try {
                if (fr != null) {
                    fr.close();
                }
            } catch (IOException e2) {
                e2.printStackTrace(System.out);
            }
        }
        return chProgram;
    }
    
    public static String read(){
        String data = JOptionPane.showInputDialog("Enter a value");
        return data;
    }
    
    public void addToScreen(String data){
        txtaScreen.append(data + "\n");
    }
    
    public void setPriority(){
        ArrayList<Programa> programs = SistemaOperativo.getPrograms();
        for (Programa program : programs) {
            String priority = JOptionPane.showInputDialog("Priority for the program " + program.getName());
            SistemaOperativo.savePriority(priority);
        }
    }
    
    public static void readNumberOfIterations(){
        int data = Integer.valueOf(JOptionPane.showInputDialog("Number of iterations per program"));
        SistemaOperativo.setNumberOfIterationsPerProgram(data);
    }
    
    public void checkAndPassForTypeOfPriority(){
        String typeOfPriority = SistemaOperativo.getTypeOfPriority();
        if (typeOfPriority.equals("X priority as/Nonexpropriative")) {
            setPriority();
        }
        if (typeOfPriority.equals("RR")) {
            readNumberOfIterations();
        }
        SistemaOperativo.changeExecutionOrder();
    }
    
    public void showMessage(String message, int messageType) {
        String title = "";
        switch (messageType) {
            case 1:
                messageType = JOptionPane.ERROR_MESSAGE;
                title = "Error message";
                break;
            case 2:
                messageType = JOptionPane.INFORMATION_MESSAGE;
                title = "Information message";
                break;
            case 3:
                messageType = JOptionPane.WARNING_MESSAGE;
                title = "Warning message";
                break;
            case 4:
                messageType = JOptionPane.QUESTION_MESSAGE;
                title = "Question message";
                break;
            case 5:
                messageType = JOptionPane.PLAIN_MESSAGE;
                title = "Plain message";
                break;
            default:
                throw new AssertionError();
        }
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativoIterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativoIterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativoIterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativoIterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SistemaOperativoIterfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTurnOff;
    private javax.swing.JButton btnTurnOn;
    private javax.swing.JComboBox<String> cmbxPlanification;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExecute;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuPrint;
    private javax.swing.JMenu jMenuStepByStep;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblProgramName;
    private javax.swing.JSpinner spnKernel;
    private javax.swing.JSpinner spnMemory;
    private javax.swing.JTable tblMemoryTable;
    private javax.swing.JTable tblProcessTable;
    private javax.swing.JTable tblProgramsTable;
    private javax.swing.JTable tblTagsTable;
    private javax.swing.JTable tblVariablesTable;
    private javax.swing.JTextField txtAccumulator;
    private javax.swing.JTextField txtPc;
    private javax.swing.JTextArea txtaPrinter;
    private javax.swing.JTextArea txtaScreen;
    // End of variables declaration//GEN-END:variables
}
